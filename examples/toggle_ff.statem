#
# Toggle flip flop
#

__MEM
    # use shared memory modbus_DO with name do; 1 byte cell size
    shm modbus_DO do 1

    # create 1 cell local memory (64bit per cell) with name lmem
    local lmem 1

__SETTINGS
    # program cycle time in milliseconds
    CYCLE_MS 100

__VAR
#   address    data_type    name
    do@1.0     le1          trigger          # toggle ff trigger signal is at bit 0 cell 1 of memory do
    do@2.0     le1          q                # toggle ff output is at bit 0 cell 1 of memory do
    do@3.0     le1          nq               # toggle ff inverted output is at bit 0 cell 1 of memory do
    lmem@0     -            old_trigger      # previous trigger signal for edge detection
    const      u            two

__INIT
    old_trigger 0
    q 0
    nq 1
    two 2

__PROGRAM
    # check trigger
    PUSH trigger
    DUP
    JZ END # trigger not set --> nothing to do

    # compare with old trigger
    DUP
    PUSH old_trigger
    NE # tos is 1 if old trigger != trigger --> rising edge detected
    JZ END

    # write q and nq
    PUSH q
    DUP
    NOT
    POP q
    POP nq

    $END
    POP old_trigger
